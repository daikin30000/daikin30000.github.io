<html>
<head>
	<meta http-equiv="Content-Type" content="text/html; charset=utf-8">
	<title>割り算フラッシュカード</title>
	<meta name="viewport" content="width=device-width, initial-scale=1.0, minimum-scale=1.0, maximum-scale=1.0, user-scalable=0" />
	<meta name="apple-mobile-web-app-capable" content="yes" />
	<link href="Scripts/jquery.mobile-1.4.5.min.css" rel="stylesheet" />
	<link href="Scripts/jquery.mobile.structure-1.4.5.min.css" rel="stylesheet" />
	<script src="Scripts/jquery-1.12.4.min.js"></script>
	<script src="Scripts/jquery.mobile-1.4.5.min.js"></script>
	<link rel="apple-touch-icon" href="warizan-icon-192-192.png" sizes="192x192">
	<link rel="apple-touch-icon" href="warizan-icon-512-512.png" sizes="512x512">
	<link rel="apple-touch-icon-precomposed" href="warizan.ico" />
	<link rel="manifest" href="manifest.json">
	<script src="./main.js"></script>
	<script type="text/javascript">
		//グローバル変数
		var a = new Array(0);
		var b = new Array(0);
		var c = new Array(0);

		//ゲーム画面でのクリック数（偶数時には問題のみ、奇数時には問題と答えを表示）
		var count = 0;

		//問題の種類(1:混合、2:あまりあり、3:あまりなし)
		var level = 0;
		var levelStr = new Array("あまり なし", "あまり あり", "混合");

		//あまりありの割合
		var dan = 0;

		$(function(){
			var $isScrolling = 0 ;
			var $timeoutId ;
			
			$(document).on( "scroll", function () {
				$isScrolling = 1 ;
	
				// スクロールを停止して200ms後に終了とする
				clearTimeout( $timeoutId );
	
				$timeoutId = setTimeout( function () {
					$isScrolling = 0 ;
				}, 200 );
			});
		});
	
		var clickEventType = (( window.ontouchstart!==null ) ? 'click':'touchend');
		//特定のページで初期化イベントを実行する
		$(document).on("pagecontainerchange", function (e, d) {
			//alert("pagecontainerchange - ページ変更後 - ページロード/ページ遷移/リターンで発生");
			//console.log(d.toPage[0].id);
			if (d.toPage[0].id === "game") {
				//ゲーム画面へ移動する場合、問題を作成する
				makeQuestion();
			}
		});
		//特定のページで初期化イベントを実行する
		$(document).on("pagecontainerbeforehide", function (e, d) {
			//alert("pagecontainerbeforehide - 前ページの非表示前 - ページ遷移/リターンで発生");
			//console.log(d.prevPage[0].id);
			if (d.toPage[0].id === "game") {
				//ゲーム画面から離れる場合、問題や問題表示部を初期化する
				init();
			}
		});
		//ボタンを押したときの移動先
		$(document).on(clickEventType, '.level1', function () {
			level = 1;
			$('body').pagecontainer('change', '#start', { transition: 'pop' });
		});
		$(document).on(clickEventType, '.level2', function () {
			level = 2;
			$('body').pagecontainer('change', '#start', { transition: 'pop' });
		});
		$(document).on(clickEventType, '.level3', function () {
			level = 3;
			$('body').pagecontainer('change', '#start', { transition: 'pop' });
		});

		$(document).on(clickEventType, '#start', function () {
			$('body').pagecontainer('change', '#game', { transition: 'pop' });
		}

		$(document).on(clickEventType, '#game_main', function () {

			//最後の問題が終了したらクリア画面へ移動
			if ((count / 2 | 0) == a.length) {

				//初期値
				//変数
				count = 0;
				//画面
				$("#vw").html("　");
				$("#vw1").html("　");
				$("#game_main").prepend('<div id="vw2">おわり！</div>');
				$("#count").html("　");

				$('body').pagecontainer('change', '#well-done', { transition: 'pop' });
				return;
			}
			$('#vw2').remove();

			//問題の文字列を作成し表示
			var ret = "";
			var ret1 = "";
			var aa = toFullWidth(""+a[count / 2 | 0]);
			var bb = toFullWidth(""+b[count / 2 | 0]);
			var cc = toFullWidth(""+c[count / 2 | 0]);
			if (count % 2 == 0) {
				ret = cc + "÷" + bb + "=";
			} else {
				ret = cc + "÷" + bb + "=";
				ret1 = aa;
			}
			$("#vw").html(ret);
			$("#vw1").html(ret1);

			//フッターに「現在の問題数 / 総問題数」を表示
			var retCount = ((count / 2 | 0) + 1) + " / " + a.length;
			$("#count").html(retCount);

			count++;
		});

		function init() {
			$("#vw").html("");
			$("#vw1").html("");
			$("#count").html("　");
			$("#game_main").prepend('<div id="vw2">スタート</div>');
			count = 0;
			a = new Array(0);
			b = new Array(0);
			c = new Array(0);
		}

		function makeQuestion() {
			//a = new Array(0);
			//b = new Array(0);
			//c = new Array(0);
			//入力された値を取得
			//問題を配列に格納
			if (level == 1) {
				//あまりあり と あまりなし の混合
				//混合割合は選択
				dan = Number($('input[name=dan]:checked').val());
				//console.log(dan);
				//例 81問の10%≒8なので指定された数字に8をかける
				var modvalue = dan * 8;
				//あまりなしの問題
				level = 3;
				makeQuestion();
				//あまりありの割合以外を削除
				//console.log(81-modvalue-1,modvalue);
				a.splice(81-modvalue-1,modvalue);
				b.splice(81-modvalue-1,modvalue);
				c.splice(81-modvalue-1,modvalue);
				//あまりありの問題
				level = 2;
				makeQuestion();
				//81問以降は削除
				a.splice(81,81);
				b.splice(81,81);
				c.splice(81,81);
				level = 1;
				//ランダムに並べ替え
				randomQuestion();
			} else if (level == 2) {
				//あまりあり
				//2の段4問、3の段8問、4の段9問、5の段10問、
				//6の段11問、7の段12問、8の段13問、9の段14問
				//合計81問のあまりのある割り算を自動生成
				var maxvalue=0;
				var myNum = 0;
				for (i = 2; i <= 9; i++) {
					maxvalue = i * 10 -1;
					for (j = 1; j <= 14; j++) {
						do{
							myNum = Math.floor(Math.random()*(maxvalue-i))+i;
						}while(myNum % i == 0);
						a.push((myNum / i | 0) + "あまり" + (myNum % i));
						b.push(i);
						c.push(myNum);

						if (i == 2 && j == 4) break;
						if (i == 3 && j == 8) break;
						if (i == 4 && j == 9) break;
						if (i == 5 && j == 10) break;
						if (i == 6 && j == 11) break;
						if (i == 7 && j == 12) break;
						if (i == 8 && j == 13) break;
						if (i == 9 && j == 14) break;
					}
				}
				//ランダムに並び替え
				randomQuestion();
				/*
				for (i = 0; i < a.length; i++) {
					//c[i] = a[i] * b[i];
					console.log(c[i] + "÷" + b[i] + "=" + a[i]);
				}
				*/
			} else if (level == 3) {
				//あまりなし
				//１～９をa,bそれぞれに入れてランダムにする
				for (i = 0; i < 9; i++) {
					for (j = 0; j < 9; j++) {
						a.push(i + 1);
						b.push(j + 1);
					}
				}
				randomQuestion();
				for (i = 0; i < a.length; i++) {
					c[i] = a[i] * b[i];
				}
			}
			//console.log(a);
			//console.log(b);
		}

		function randomQuestion() {
			for (i = 0; i < a.length; i++) {
				var j = Math.floor(Math.random() * i);
				var tmp_a = a[i];
				var tmp_b = b[i];
				var tmp_c = c[i];
				a[i] = a[j];
				b[i] = b[j];
				c[i] = c[j];
				a[j] = tmp_a;
				b[j] = tmp_b;
				c[j] = tmp_c;
			}
		}

		function updateApp() {
			var cache = window.applicationCache;
			cache.addEventListener("updateready", function () {
				if (confirm('アプリケーションの新しいバージョンが利用可能です。更新しますか？')) {
					cache.swapCache();
					location.reload();
				}
			});
			if (navigator.onLine) {
				cache.update();
			}
		('updateready', onUpdateReady);
		}

		// 半角数字を全角数字にする場合
		function toFullWidth(value) {
			return value.replace(/[0-9]/g, s => {
				return String.fromCharCode(s.charCodeAt(0) + 0xfee0)
			})
		}
	</script>

	<style type="text/css">
		* {
		  -webkit-tap-highlight-color: rgba(0, 0, 0, 0);
		  -webkit-touch-callout: none;
		  -webkit-user-select: none;
		}

		label img {
			margin-right: 10px;
		}

		#pic-frame {
			width: 280px;
			height: 280px;
			position: relative;
			left: 0px;
			top: 0px;
		}

		#pic-guide {
			position: absolute;
			background-repeat: no-repeat;
			width: 100%;
			height: 100%;
		}

		.tile {
			border: 1px solid;
			position: absolute;
		}

		#well-done {
			position: relative;
		}

		div.button-table {
			text-align: center;
		}

		div.checkgroup {
			text-align: center;
		}

		div.radiogroup {
			text-align: center;
		}

		div.ui-controlgroup-label {
			text-align: center;
		}

		div#vw {
			/*
			background-color: tomato;
			font-family: "Courier New", Consolas, monospace;
			*/
			font-family: monospace;
			font-size: 17vw;
			text-align: left;
		}

		div#vw1 {
			/*
			font-family: "Courier New", Consolas, monospace;
			background-color:yellow;
			*/
			font-family: monospace;
			font-size: 17vw;
			text-align: right;
		}
		div#vw2 {
			/*
			font-family: "Courier New", Consolas, monospace;
			background-color:rgb(13, 114, 197);
			*/
			font-family: monospace;
			font-size: 17vw;
			text-align: right;
			vertical-align: middle;
			height:85%;
			text-align: center;
			display: -webkit-flex;
			display: flex;
			 -webkit-align-items: center; /* 縦方向中央揃え（Safari用） */
			 align-items: center; /* 縦方向中央揃え */
			 -webkit-justify-content: center; /* 横方向中央揃え（Safari用） */
			 justify-content: center; /* 横方向中央揃え */
		}

		[data-role=page] {
			height: 100% !important;
			position: relative !important;
			background-color: #005000;
			color:white;
		}

		[data-role=footer] {
			bottom: 0;
			position: absolute !important;
			top: auto !important;
			width: 100%;
		}  
		div.game_main{
			height: 100%;
			padding: 0px 0px 0px 0px;
		}
	</style>
</head>
<body>
	<!-- メニューページ -->
	<div id="menu" data-role="page">
		<div data-role="content">
			<button class="level3">あまり なし で れんしゅう</button>
			<button class="level2">あまり あり で れんしゅう</button>
			<button class="level1">混合 で れんしゅう</button>
			<div role="heading" class="ui-controlgroup-label">あまり は どのくらい？</div>
			<div class="radiogroup">
				<fieldset class="radio" data-role="controlgroup" data-type="horizontal">
					<label for="dan1">10%</label>
					<input type="radio" name="dan" id="dan1" value="1">
					<label for="dan2">20%</label>
					<input type="radio" name="dan" id="dan2" value="2">
					<label for="dan3">30%</label>
					<input type="radio" name="dan" id="dan3" value="3">
					<label for="dan4">40%</label>
					<input type="radio" name="dan" id="dan4" value="4">
					<label for="dan5">50%</label>
					<input type="radio" name="dan" id="dan5" value="5" checked>
					<label for="dan6">60%</label>
					<input type="radio" name="dan" id="dan6" value="6">
					<label for="dan7">70%</label>
					<input type="radio" name="dan" id="dan7" value="7">
					<label for="dan8">80%</label>
					<input type="radio" name="dan" id="dan8" value="8">
					<label for="dan9">90%</label>
					<input type="radio" name="dan" id="dan9" value="9">
				</fieldset>
			</div>
		</div>
		<div data-role="footer">
			<div class="ui-btn-right">
				<!--<a onclick="updateApp();" class="ui-btn ui-icon-refresh ui-btn-icon-left">アプリ更新</a>-->
			</div>
			<h2>　</h2>
		</div>
	</div>

	<!-- れんしゅうページ -->
	<div id="game" data-role="page">
		<div data-role="content" id="game_main" class="game_main" onclick="">
			<div id="vw"></div>
			<div id="vw1"></div>
		</div>
		<div data-role="footer">
			<div class="ui-btn-left">
				<a href="#menu" class="ui-btn ui-icon-bars ui-btn-icon-left">ホーム</a>
			</div>
			<div class="ui-btn-right">
			</div>
			<h2 id="count">
				0 / 0
			</h2>
		</div>
	</div>

	<!-- Well done ポップアップページ -->
	<div id="well-done" data-role="page">
		<div data-role="content" id="end" class="end" onclick="">
			<div id="vw2">
				おわり！
			</div>
		</div>
		<div data-role="footer">
			<div class="ui-btn-left">
				<a href="#menu" class="ui-btn ui-icon-bars ui-btn-icon-left">ホーム</a>
			</div>
			<div class="ui-btn-right">
			</div>
			<h2></h2>

		</div>
	</div>

	<!-- Start ポップアップページ -->
	<div id="start" data-role="page">
		<div data-role="content" id="start" class="start" onclick="">
			<div id="vw2">
				スタート！
			</div>
		</div>
		<div data-role="footer">
			<div class="ui-btn-left">
				<a href="#menu" class="ui-btn ui-icon-bars ui-btn-icon-left">ホーム</a>
			</div>
			<div class="ui-btn-right">
			</div>
			<h2></h2>

		</div>
	</div>

</body>
</html>
